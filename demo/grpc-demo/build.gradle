plugins {
  id 'java'
  id 'org.springframework.boot' version '3.4.6'
  id 'io.spring.dependency-management' version '1.1.7'
  id 'com.google.protobuf' version '0.9.4'
}

group = 'dev.pichborith'
version = '0.0.1-SNAPSHOT'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(17)
  }
}

configurations {
  compileOnly {
    extendsFrom annotationProcessor
  }
}

repositories {
  mavenCentral()
}

ext {
  set('springGrpcVersion', "0.8.0")
}

dependencies {
//  implementation 'org.springframework.boot:spring-boot-starter-webflux'
//  implementation 'org.springframework.grpc:spring-grpc-spring-boot-starter'
  implementation 'org.springframework.boot:spring-boot-starter-data-mongodb-reactive'

  implementation 'io.projectreactor:reactor-core'

  implementation 'org.springframework.grpc:spring-grpc-spring-boot-starter'
  implementation 'io.grpc:grpc-services'

  implementation 'com.fasterxml.jackson.core:jackson-databind'

  compileOnly 'org.projectlombok:lombok'
  annotationProcessor 'org.projectlombok:lombok'
  implementation "org.mapstruct:mapstruct:1.6.3"
  annotationProcessor "org.mapstruct:mapstruct-processor:1.6.3"
  annotationProcessor "org.projectlombok:lombok-mapstruct-binding:0.2.0"
  annotationProcessor "no.entur.mapstruct.spi:protobuf-spi-impl:1.47"

  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testImplementation 'io.projectreactor:reactor-test'
  testImplementation 'org.springframework.grpc:spring-grpc-test'
  testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
  imports {
    mavenBom "org.springframework.grpc:spring-grpc-dependencies:${springGrpcVersion}"
  }
}

protobuf {
  protoc {
    artifact = 'com.google.protobuf:protoc'
  }
  plugins {
    grpc {
      artifact = 'io.grpc:protoc-gen-grpc-java'
    }
  }
  generateProtoTasks {
    all()*.plugins {
      grpc {
        option 'jakarta_omit'
        option '@generated=omit'
      }
    }
  }
}

def additionalCompilerArgs = [
  "-Amapstruct.defaultComponentModel=spring",
  "-Amapstruct.unmappedTargetPolicy=ERROR",
  "-Amapstruct.defaultInjectionStrategy=constructor"
]

compileJava {
  options.encoding = 'UTF-8'
  options.compilerArgs += additionalCompilerArgs
}

tasks.named('test') {
  useJUnitPlatform()
}
